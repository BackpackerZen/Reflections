Through tools for comparing files I improve my workflow. It enables me to have a smooth collaboration with others. 


How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
--
I can switch back and forth between different versions and choose the best parts. Findind and correcting errors is more efficient. It enables me great clarity about the progress.


What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
--
Pro: Logical, Working
Cons: New habit


Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
--
Because the different tools have different purposes.


How can you use the commands git log and git diff to view the history of files?
--
Through "git log" I can track the different versions I need and "git diff" I am being able to see the differences being made.


How might using version control make you more confident to make changes that could break something?
--
Way more confident!


Now that you have your workspace set up, what do you want to try using Git for?
--
I want to use Git for making my workflow more efficient and safer.


CMD:
fc							  #	fileCompare
cd ~                          # change directories to your home directory
mkdir version-control         # make version-control directory
cd version-control            # go to version-control directory
mkdir reflections             # create reflections directory
cd reflections                # go to reflections directory
subl lesson_1_reflections.txt # launch sublime with file called lesson_1_reflections.txt (you can replace subl with another editor here if you prefer a different one)